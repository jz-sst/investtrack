Build a complete Python-based AI Stock Analysis Bot project in Replit using natural language AI generation. The bot should scrape or pull stock data from public APIs like yfinance for specific markets, sectors, or categories; conduct detailed Technical Analysis (TA) on price data by detecting common chart patterns (e.g., double bottom, triangle, head & shoulders, double/triple top/bottom, flags/pennants, cup and handle, candlestick patterns like hammer, doji, engulfing, shooting star) and using technical indicators (RSI for overbought/oversold, MACD for momentum crossovers, Moving Averages like SMA/EMA for trends/golden/death crosses, Stochastic Oscillator, ADX for trend strength, Aroon, Bollinger Bands for volatility, Ichimoku Cloud, Parabolic SAR, momentum indicators like ROC, volume-based like OBV and Accumulation/Distribution); identify trend reversals, breakouts, or consolidations using trendlines, channels, support/resistance (including Fibonacci retracements/extensions, pivot points), and strategies like trend following, mean reversion, breakout trading, swing trading, Elliott Wave, Gann analysis; rank and filter stocks based on promising TA setups with scoring (e.g., 0-100 based on rules like RSI<30 + MACD crossover + pattern detection); perform Fundamental Analysis (FA) on filtered stocks by extracting/comparing ratios (P/E, ROE, Debt/Equity, EPS, revenue) from income statements, balance sheets, cash flows via yfinance or Financial Modeling Prep; determine financial health and attractiveness with FA scoring; recommend top stock picks based on combined TA/FA scoring (e.g., 60% TA + 40% FA weights), with explainable reasoning and suggestions for further research.

Design goals: Modular with separate modules for TA, FA, data scraping, recommendation; scalable to handle hundreds of stocks efficiently using pandas for batch processing and multiprocessing; smart logic that can improve with rules or ML (initially rule-based, optional CNN/ML for pattern detection on candlestick images using torch); explainable with supporting reasoning for every recommendation; include optional interactive frontend like Streamlit dashboard or CLI for user interaction with results.

Preferred tech stack: Python; data sources/APIs: yfinance, Alpha Vantage (with fallback), Financial Modeling Prep, SEC EDGAR if needed, BeautifulSoup/Selenium for scraping; TA libraries: pandas-ta, ta-lib if available, scipy for peak detection; chart pattern detection optional via CNN/ML on images; database: SQLite for caching; frontend: Streamlit or Dash for dashboard.

Sample workflow: User selects stock universe (e.g., sector/region via tickers list); retrieve historical price data; analyze TA patterns/indicators; filter/score promising stocks (TA score >50); pull FA data for filtered list; produce final ranking with rationales.

Include enhancements: Add ML for advanced pattern detection (PyTorch CNN on OHLC images, train on public datasets); integrate more sources like Alpha Vantage API; improve scoring with scikit-learn; add backtesting on historical data; enhance frontend with Plotly charts for visuals (candlesticks with indicators); scalability with concurrent.futures; security with env vars for API keys; optional FastAPI backend for API endpoints to make it SaaS-ready.

Set up the project: Create a Python Repl; install dependencies via pip (yfinance, pandas-ta, pandas, scipy, streamlit, fastapi, uvicorn, requests, torch, torchvision, scikit-learn); structure with files like data_retrieval.py (fetch prices/fundamentals, SQLite caching), technical_analysis.py (compute indicators, detect patterns rule-based or ML), fundamental_analysis.py (parse/score ratios), recommendation.py (combine scores, rank with reasoning), main.py (orchestrate workflow, console output with example tickers like AAPL,TSLA,GOOGL), dashboard.py (Streamlit UI for input tickers, display results with charts); make it runnable via 'python main.py' or 'streamlit run dashboard.py'; handle errors, ensure compatibility with Replit environment (no internet for extra installs beyond basics).