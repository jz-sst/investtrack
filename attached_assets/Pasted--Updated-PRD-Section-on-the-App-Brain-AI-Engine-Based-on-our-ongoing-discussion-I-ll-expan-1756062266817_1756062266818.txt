### Updated PRD: Section on the "App Brain" (AI Engine)

Based on our ongoing discussion, I'll expand the Product Requirements Document (PRD) with a dedicated section for the "brain" of the app—referred to here as the AI Engine. This component will serve as the intelligent core, processing data, applying rules, and generating insights for continuous monitoring. Since the interface design you mentioned (created through "banani" and attached) couldn't be directly analyzed in this context (if it's a file like a PDF or image, feel free to provide more details or a link for deeper integration), I'll assume it aligns with the screens from the previous PRD (Dashboard, Portfolio Management, etc.). The AI Engine will integrate seamlessly with those UI elements, powering real-time updates, analyses, and recommendations.

This section focuses on embedding rules for technical and fundamental analysis, interpreting metrics, quantifying qualitative data, and connecting to live financial sources. The engine will be modular, using a combination of rule-based systems, machine learning (ML) models, and natural language processing (NLP) to make the app "smart" and proactive.

#### 8. AI Engine ("Brain") Overview
- **Description**: The AI Engine is the backend intelligence layer that automates analysis, monitors data continuously, and provides actionable insights. It runs in the cloud (e.g., AWS or Google Cloud) for scalability, with edge computing for low-latency mobile responses. It processes inputs from data sources, applies predefined rules and models, and outputs to the app's screens (e.g., alerts on Dashboard, suggestions in Portfolio Management).
- **Key Principles**:
  - **Continuous Monitoring**: Runs 24/7 with scheduled jobs (e.g., every 5-15 minutes during market hours) and event-triggered analyses (e.g., on news breaks).
  - **Explainability**: All outputs include human-readable explanations (e.g., "This stock shows a head and shoulders pattern because...").
  - **Customization**: Users can tweak rules (e.g., adjust risk thresholds) via app settings.
  - **Ethical AI**: Bias mitigation in models; transparent data usage; disclaimers on predictions (e.g., "Not financial advice").
- **Architecture**:
  - **Components**: Rule Engine (for deterministic rules), ML Models (for predictions and quantification), Data Pipeline (for ingestion and processing).
  - **Tech Stack**: Python backend (with libraries like Pandas for data handling, Scikit-learn/TensorFlow for ML, NLTK/Transformers for NLP); database (e.g., MongoDB for unstructured data, TimescaleDB for time-series).
  - **Deployment**: Serverless functions (e.g., AWS Lambda) for on-demand analysis; WebSockets for real-time pushes to the app.
- **Performance Requirements**: Latency <1 second for queries; 99.99% uptime; handle 10,000+ users with auto-scaling.

#### 8.1 Technical Analysis Rules
The engine will include a comprehensive set of rules for technical analysis, focusing on chart patterns, indicators, and signals. These are hardcoded initially but can be updated via admin tools or ML fine-tuning.

- **Chart Patterns**:
  - **Bullish Patterns**: Head and Shoulders Inverse (rules: Three troughs with middle lowest; neckline breakout with volume increase >20%); Ascending Triangle (flat top, rising bottoms; breakout on volume surge).
  - **Bearish Patterns**: Head and Shoulders (three peaks, middle highest; neckline breakdown); Descending Triangle (flat bottom, falling tops).
  - **Continuation Patterns**: Flags/Pennants (short consolidation after trend; breakout in trend direction); Cup and Handle (U-shaped cup followed by small handle; bullish breakout).
  - **Reversal Patterns**: Double Top/Bottom (M/W shape; confirmation on support/resistance break); Triple Top/Bottom (similar but three peaks/troughs).
  - **Detection Logic**: Use computer vision-inspired algorithms (e.g., via OpenCV or custom peak-finding in time-series data) to scan price/volume charts. Thresholds: Pattern confidence >70% based on historical fit.
  
- **Technical Indicators**:
  - Moving Averages (SMA/EMA): Crossover rules (e.g., golden cross: 50-day SMA > 200-day SMA signals buy).
  - RSI (Relative Strength Index): Overbought (>70) sell signal; Oversold (<30) buy signal.
  - MACD (Moving Average Convergence Divergence): Signal line crossovers; histogram for momentum.
  - Bollinger Bands: Squeeze (low volatility) for impending breakout; price touching bands for overextension.
  - Volume Indicators: On-Balance Volume (OBV) for trend confirmation; rules like "Breakout invalid without 50% volume increase."
  - Other: Stochastic Oscillator, Fibonacci Retracements (levels: 23.6%, 38.2%, etc., for support/resistance).

- **Integration**: For Stock Analysis screen, scan daily/intraday charts; generate signals like "Buy: Bullish engulfing candle detected." In Market Scanner, filter stocks matching user criteria (e.g., "RSI <30 and volume > average").

#### 8.2 Fundamental Analysis Rules and Metrics
The engine will compute and interpret key financial metrics using standardized formulas, with explanations tied to each. Data is pulled from financial statements (balance sheet, income, cash flow).

- **Key Metrics and Meanings**:
  - **Valuation Metrics**:
    - P/E Ratio (Price/Earnings): Formula: Market Price / EPS. Meaning: <15 suggests undervalued (value stock); >25 overvalued (growth stock). Adjust for industry averages (e.g., tech >20 normal).
    - P/B Ratio (Price/Book): Formula: Market Price / Book Value per Share. Meaning: <1 indicates undervalued assets; >3 potential overvaluation.
    - EV/EBITDA: Formula: Enterprise Value / EBITDA. Meaning: <10 good for acquisitions; compares debt-inclusive value.
  - **Profitability Metrics**:
    - ROE (Return on Equity): Formula: Net Income / Shareholders' Equity. Meaning: >15% strong management efficiency; <5% red flag for poor returns.
    - ROA (Return on Assets): Formula: Net Income / Total Assets. Meaning: >5% efficient asset use; trends upward signal improvement.
    - Gross Margin: Formula: (Revenue - COGS) / Revenue. Meaning: >40% healthy for most industries; declining indicates cost pressures.
  - **Liquidity/Solvency Metrics**:
    - Current Ratio: Formula: Current Assets / Current Liabilities. Meaning: >2 safe liquidity; <1 risk of short-term insolvency.
    - Debt-to-Equity: Formula: Total Debt / Equity. Meaning: <1 conservative; >2 high leverage risk.
    - Interest Coverage: Formula: EBIT / Interest Expense. Meaning: >1.5 ability to pay debts; <1 distress signal.
  - **Growth Metrics**:
    - EPS Growth: Formula: (Current EPS - Prior EPS) / Prior EPS. Meaning: >10% YoY sustainable growth; negative flags issues.
    - Revenue Growth: Similar to EPS; >5-10% expected for mature companies.

- **Rules Engine**:
  - Scoring System: Assign weights (e.g., 30% valuation, 40% profitability) to generate an overall "Fundamental Score" (0-100). Rules: If P/E < industry avg and ROE >15%, label "Strong Buy."
  - Benchmarks: Compare to sector peers (e.g., via stored industry data).
  - Integration: In Stock Analysis, display metrics with interpretations (e.g., "High Debt-to-Equity (2.5) means increased risk in downturns"). For Portfolio Management, flag underperformers for rebalancing.

#### 8.3 Quantifying Qualitative Data
To handle non-numeric inputs like news, alerts, and events, the engine uses NLP and sentiment analysis to convert them into quantifiable scores.

- **Sources**: Media news (headlines/articles), alerts (earnings calls, regulatory filings), events (mergers, product launches).
- **Quantification Methods**:
  - **Sentiment Analysis**: Use pre-trained models (e.g., Hugging Face Transformers with VADER or BERT) to score text: Positive (+1 to +5), Neutral (0), Negative (-1 to -5). Aggregate for a "Sentiment Index" (e.g., average over last 7 days).
  - **Event Impact Scoring**: Predefined rules: Earnings beat = +3; Lawsuit = -4. ML model predicts impact based on historical market reactions (e.g., trained on past data: "Tesla recall → -10% stock drop").
  - **Topic Extraction**: Identify keywords (e.g., "inflation," "AI boom") and link to metrics (e.g., high inflation sentiment → adjust growth projections downward).
  - **Aggregation**: Combine into a "Qualitative Score" (e.g., 70/100 = moderately positive). Handle volume: High news volume amplifies scores (e.g., multiplier if >10 articles/day).

- **Handling Edge Cases**: Filter noise (e.g., ignore unverified sources); use entity recognition to tie to specific stocks/sectors.
- **Integration**: In Dashboard, show "News Impact: +2.5 (Bullish on tech sector due to AI advancements)." In Investment Opportunities, factor into risk analysis (e.g., "Event Risk: High from upcoming Fed meeting").

#### 8.4 Connection to Financial Data Sources
For consistent, updated analysis, the engine integrates with reliable, real-time APIs. All connections use secure APIs with rate limiting and fallbacks.

- **Primary Sources** (as of August 24, 2025):
  - **Market Data**: Alpha Vantage or Yahoo Finance API (free tiers for basics; premium for high-frequency). Provides stock quotes, historical prices, indices.
  - **Fundamental Data**: Financial Modeling Prep (FMP) or Polygon.io for financial statements, ratios, earnings calendars.
  - **News and Qualitative**: NewsAPI.org or Finnhub for headlines/sentiment; SEC EDGAR API for filings.
  - **Advanced**: Bloomberg API (premium) for institutional-grade data; Crypto APIs like CoinGecko if expanding to assets.
  
- **Data Pipeline**:
  - **Ingestion**: ETL process (Extract via APIs, Transform with rules/ML, Load to database). Use Apache Kafka for streaming real-time data.
  - **Frequency**: Real-time for quotes (WebSockets); Daily for fundamentals; On-event for news (webhooks).
  - **Fallbacks**: Cache last-known data; switch providers if one fails.
  - **Compliance**: API keys stored securely; adhere to usage terms (e.g., no scraping).

- **Integration**: Powers all screens—e.g., Market Scanner pulls live data for scans; AI Engine triggers alerts on data changes.

#### 8.5 Development and Testing
- **Phases**: Prototype with sample data; Train ML models on historical datasets (e.g., Kaggle finance data); Beta test with simulated markets.
- **Risks**: Data delays (mitigate with multiple sources); Model inaccuracies (regular retraining).
- **Metrics**: Accuracy of signals (>80% backtested); User satisfaction via feedback.

This enhances the PRD—let me know if you want code prototypes, specific ML implementations, or adjustments based on the interface design!